// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: ride_request_repository_sqlc.sql

package dbsqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRideRequest = `-- name: CreateRideRequest :one
INSERT INTO
    tb_ride_requests (
        passenger_id,
        origin,
        destination,
        ride_datetime,
        description,
        img_url
    )
VALUES (
        $1,
        ST_SetSRID (ST_MakePoint ($2, $3), 4326),
        ST_SetSRID (ST_MakePoint ($4, $5), 4326),
        $6,
        $7,
        $8
    )
RETURNING
    id,
    passenger_id,
    ST_AsText (origin) AS origin,
    ST_AsText (destination) AS destination,
    ride_datetime,
    drive_offer_id,
    description,
    img_url,
    status
`

type CreateRideRequestParams struct {
	PassengerID   string
	StMakepoint   interface{}
	StMakepoint_2 interface{}
	StMakepoint_3 interface{}
	StMakepoint_4 interface{}
	RideDatetime  pgtype.Timestamp
	Description   pgtype.Text
	ImgUrl        pgtype.Text
}

type CreateRideRequestRow struct {
	ID           int32
	PassengerID  string
	Origin       interface{}
	Destination  interface{}
	RideDatetime pgtype.Timestamp
	DriveOfferID pgtype.Int4
	Description  pgtype.Text
	ImgUrl       pgtype.Text
	Status       pgtype.Text
}

func (q *Queries) CreateRideRequest(ctx context.Context, arg CreateRideRequestParams) (CreateRideRequestRow, error) {
	row := q.db.QueryRow(ctx, createRideRequest,
		arg.PassengerID,
		arg.StMakepoint,
		arg.StMakepoint_2,
		arg.StMakepoint_3,
		arg.StMakepoint_4,
		arg.RideDatetime,
		arg.Description,
		arg.ImgUrl,
	)
	var i CreateRideRequestRow
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Origin,
		&i.Destination,
		&i.RideDatetime,
		&i.DriveOfferID,
		&i.Description,
		&i.ImgUrl,
		&i.Status,
	)
	return i, err
}

const deleteRideRequest = `-- name: DeleteRideRequest :one
DELETE FROM tb_ride_requests WHERE id = $1 RETURNING id, passenger_id, origin, destination, ride_datetime, drive_offer_id, status, description, img_url
`

func (q *Queries) DeleteRideRequest(ctx context.Context, id int32) (RideRequest, error) {
	row := q.db.QueryRow(ctx, deleteRideRequest, id)
	var i RideRequest
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Origin,
		&i.Destination,
		&i.RideDatetime,
		&i.DriveOfferID,
		&i.Status,
		&i.Description,
		&i.ImgUrl,
	)
	return i, err
}

const findAllRideRequests = `-- name: FindAllRideRequests :many
SELECT
    id,
    passenger_id,
    ST_AsText(origin) AS origin,
    ST_AsText(destination) AS destination,
    ride_datetime,
    drive_offer_id,
    img_url,
    status,
    description
FROM tb_ride_requests
`

type FindAllRideRequestsRow struct {
	ID           int32
	PassengerID  string
	Origin       interface{}
	Destination  interface{}
	RideDatetime pgtype.Timestamp
	DriveOfferID pgtype.Int4
	ImgUrl       pgtype.Text
	Status       pgtype.Text
	Description  pgtype.Text
}

func (q *Queries) FindAllRideRequests(ctx context.Context) ([]FindAllRideRequestsRow, error) {
	rows, err := q.db.Query(ctx, findAllRideRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllRideRequestsRow
	for rows.Next() {
		var i FindAllRideRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.Origin,
			&i.Destination,
			&i.RideDatetime,
			&i.DriveOfferID,
			&i.ImgUrl,
			&i.Status,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNearRideRequests = `-- name: FindNearRideRequests :many
WITH trajeto AS (
    SELECT unnest($1::point[]) as ponto
)
SELECT
    rr.id,
    rr.passenger_id,
    ST_AsText(rr.origin) AS origin,
    ST_AsText(rr.destination) AS destination,
    rr.ride_datetime,
    rr.drive_offer_id,
    rr.status,
    rr.img_url,
    description
FROM tb_ride_requests rr
WHERE EXISTS (
    SELECT 1
    FROM trajeto
    WHERE
        (
            ST_DWithin(
                ST_SetSRID(ST_MakePoint(trajeto.ponto[0], trajeto.ponto[1]), 4326)::geography,
                rr.origin::geography,
                $2
            )
        OR
            ST_DWithin(
                ST_SetSRID(ST_MakePoint(trajeto.ponto[0], trajeto.ponto[1]), 4326)::geography,
                rr.destination::geography,
                $2
            )
        )
)
`

type FindNearRideRequestsParams struct {
	Column1   []pgtype.Point
	StDwithin interface{}
}

type FindNearRideRequestsRow struct {
	ID           int32
	PassengerID  string
	Origin       interface{}
	Destination  interface{}
	RideDatetime pgtype.Timestamp
	DriveOfferID pgtype.Int4
	Status       pgtype.Text
	ImgUrl       pgtype.Text
	Description  pgtype.Text
}

func (q *Queries) FindNearRideRequests(ctx context.Context, arg FindNearRideRequestsParams) ([]FindNearRideRequestsRow, error) {
	rows, err := q.db.Query(ctx, findNearRideRequests, arg.Column1, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindNearRideRequestsRow
	for rows.Next() {
		var i FindNearRideRequestsRow
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.Origin,
			&i.Destination,
			&i.RideDatetime,
			&i.DriveOfferID,
			&i.Status,
			&i.ImgUrl,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findRideRequestByID = `-- name: FindRideRequestByID :one
SELECT
    id,
    passenger_id,
    ST_AsText(origin) AS origin,
    ST_AsText(destination) AS destination,
    ride_datetime,
    drive_offer_id,
    status,
    img_url,
    description
 FROM tb_ride_requests WHERE id = $1
`

type FindRideRequestByIDRow struct {
	ID           int32
	PassengerID  string
	Origin       interface{}
	Destination  interface{}
	RideDatetime pgtype.Timestamp
	DriveOfferID pgtype.Int4
	Status       pgtype.Text
	ImgUrl       pgtype.Text
	Description  pgtype.Text
}

func (q *Queries) FindRideRequestByID(ctx context.Context, id int32) (FindRideRequestByIDRow, error) {
	row := q.db.QueryRow(ctx, findRideRequestByID, id)
	var i FindRideRequestByIDRow
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Origin,
		&i.Destination,
		&i.RideDatetime,
		&i.DriveOfferID,
		&i.Status,
		&i.ImgUrl,
		&i.Description,
	)
	return i, err
}

const findRideRequestByPassengerID = `-- name: FindRideRequestByPassengerID :many
SELECT id, passenger_id, origin, destination, ride_datetime, drive_offer_id, status, description, img_url FROM tb_ride_requests WHERE passenger_id = $1
`

func (q *Queries) FindRideRequestByPassengerID(ctx context.Context, passengerID string) ([]RideRequest, error) {
	rows, err := q.db.Query(ctx, findRideRequestByPassengerID, passengerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RideRequest
	for rows.Next() {
		var i RideRequest
		if err := rows.Scan(
			&i.ID,
			&i.PassengerID,
			&i.Origin,
			&i.Destination,
			&i.RideDatetime,
			&i.DriveOfferID,
			&i.Status,
			&i.Description,
			&i.ImgUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRideRequest = `-- name: UpdateRideRequest :one
UPDATE tb_ride_requests
SET
    passenger_id = $2,
    origin = ST_SetSRID(ST_MakePoint($3, $4), 4326),
    destination = ST_SetSRID(ST_MakePoint($5, $6), 4326),
    ride_datetime = $7,
    drive_offer_id = $8,
    status = $9,
    description = $10,
    img_url = $11
WHERE id = $1
RETURNING
    id,
    passenger_id,
    ST_AsText(origin) AS origin,
    ST_AsText(destination) AS destination,
    ride_datetime,
    drive_offer_id,
    description,
    img_url,
    status
`

type UpdateRideRequestParams struct {
	ID            int32
	PassengerID   string
	StMakepoint   interface{}
	StMakepoint_2 interface{}
	StMakepoint_3 interface{}
	StMakepoint_4 interface{}
	RideDatetime  pgtype.Timestamp
	DriveOfferID  pgtype.Int4
	Status        pgtype.Text
	Description   pgtype.Text
	ImgUrl        pgtype.Text
}

type UpdateRideRequestRow struct {
	ID           int32
	PassengerID  string
	Origin       interface{}
	Destination  interface{}
	RideDatetime pgtype.Timestamp
	DriveOfferID pgtype.Int4
	Description  pgtype.Text
	ImgUrl       pgtype.Text
	Status       pgtype.Text
}

func (q *Queries) UpdateRideRequest(ctx context.Context, arg UpdateRideRequestParams) (UpdateRideRequestRow, error) {
	row := q.db.QueryRow(ctx, updateRideRequest,
		arg.ID,
		arg.PassengerID,
		arg.StMakepoint,
		arg.StMakepoint_2,
		arg.StMakepoint_3,
		arg.StMakepoint_4,
		arg.RideDatetime,
		arg.DriveOfferID,
		arg.Status,
		arg.Description,
		arg.ImgUrl,
	)
	var i UpdateRideRequestRow
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Origin,
		&i.Destination,
		&i.RideDatetime,
		&i.DriveOfferID,
		&i.Description,
		&i.ImgUrl,
		&i.Status,
	)
	return i, err
}

const updateRideRequestStatus = `-- name: UpdateRideRequestStatus :one
UPDATE tb_ride_requests SET status = $2 WHERE id = $1 RETURNING id, passenger_id, origin, destination, ride_datetime, drive_offer_id, status, description, img_url
`

type UpdateRideRequestStatusParams struct {
	ID     int32
	Status pgtype.Text
}

func (q *Queries) UpdateRideRequestStatus(ctx context.Context, arg UpdateRideRequestStatusParams) (RideRequest, error) {
	row := q.db.QueryRow(ctx, updateRideRequestStatus, arg.ID, arg.Status)
	var i RideRequest
	err := row.Scan(
		&i.ID,
		&i.PassengerID,
		&i.Origin,
		&i.Destination,
		&i.RideDatetime,
		&i.DriveOfferID,
		&i.Status,
		&i.Description,
		&i.ImgUrl,
	)
	return i, err
}
